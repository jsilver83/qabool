# Generated by Django 2.1.5 on 2019-01-23 10:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import undergraduate_admission.media_handlers
import undergraduate_admission.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('undergraduate_admission', '0012_auto_20190121_1533'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdmissionRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_date', models.DateTimeField(auto_created=True, null=True, verbose_name='Request Date')),
                ('student_notes', models.TextField(blank=True, max_length=500, null=True, verbose_name='Student Notes')),
                ('admission_note', models.CharField(blank=True, max_length=500, null=True, verbose_name='Admission Note')),
                ('admission_note2', models.CharField(blank=True, max_length=500, null=True, verbose_name='Admission Note 2')),
                ('admission_note3', models.CharField(blank=True, max_length=500, null=True, verbose_name='Admission Note 3')),
                ('first_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='First Name (Arabic)')),
                ('second_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='Second Name (Arabic)')),
                ('third_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='Third Name (Arabic)')),
                ('family_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='Family Name (Arabic)')),
                ('student_full_name_ar', models.CharField(blank=True, help_text='Your Arabic full name should be similar to Identification ID/Iqama.', max_length=400, null=True, verbose_name='Student Full Name (Arabic)')),
                ('first_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='First Name (English)')),
                ('second_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='Second Name (English)')),
                ('third_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='Third Name (English)')),
                ('family_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='Family Name (English)')),
                ('student_full_name_en', models.CharField(blank=True, help_text='Your English full name should be similar to Passport or high school certificate.', max_length=400, null=True, verbose_name='Student Full Name (English)')),
                ('nationality', django_countries.fields.CountryField(max_length=2, null=True, verbose_name='Nationality')),
                ('saudi_mother', models.NullBooleanField(verbose_name='Saudi Mother')),
                ('saudi_mother_gov_id', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\d{9,11}$', message='You have entered an invalid Government ID')], verbose_name='Saudi Mother Government ID')),
                ('mother_gov_id_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_mother_govid, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Mother Government ID')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('birthday_ah', models.CharField(blank=True, max_length=50, null=True, verbose_name='Birthday Hijri')),
                ('birth_place', models.CharField(blank=True, help_text='Country and city. e.g. Saudi Arabia Jeddah', max_length=100, null=True, verbose_name='Birth Place')),
                ('birth_certificate', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_birth, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Birth Date Certificate')),
                ('mobile', models.CharField(db_index=True, help_text='Mobile number should be of this format "9665xxxxxxxx". Use English numerals only. Please make sure to activate promotional messages from your mobile provider.', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^(9665|٩٦٦٥)\\d{8}$', message='You have entered an invalid mobile number')], verbose_name='Mobile')),
                ('phone', models.CharField(blank=True, help_text='With country and area code. e.g. 966138602722', max_length=50, null=True, verbose_name='Phone')),
                ('kfupm_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='KFUPM ID')),
                ('personal_picture', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_picture, validators=[undergraduate_admission.validators.validate_image_extension], verbose_name='Personal Picture')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=128, verbose_name='Gender')),
                ('blood_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Blood Type')),
                ('student_address', models.CharField(blank=True, max_length=500, null=True, verbose_name='Student Address')),
                ('social_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Social Status')),
                ('kids_no', models.CharField(blank=True, max_length=50, null=True, verbose_name='Number of Kids')),
                ('is_employed', models.BooleanField(default=False, help_text='It is required that applicant be unemployed to be full-time. In case you are currently employed, you need to bring clearance from your employer.', verbose_name='Are You Employed?')),
                ('employer_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Employer Name')),
                ('is_disabled', models.BooleanField(default=False, help_text='This will let us help you better and will not affect your acceptance chances.', verbose_name='Do you have any disabilities?')),
                ('disability_needs', models.CharField(blank=True, max_length=50, null=True, verbose_name='Disability Type')),
                ('disability_needs_notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Other Disability')),
                ('is_diseased', models.BooleanField(default=False, help_text='This will let us help you better and will not affect your acceptance chances.', verbose_name='Do you have any chronic diseases?')),
                ('chronic_diseases', models.CharField(blank=True, max_length=500, null=True, verbose_name='Chronic Diseases')),
                ('chronic_diseases_notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Chronic Diseases Notes')),
                ('qudrat_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Qudrat Score (Qiyas)')),
                ('tahsili_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Tahsili Score (Qiyas)')),
                ('high_school_gpa', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='High School GPA (Ministry)')),
                ('high_school_gpa_student_entry', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='High School GPA')),
                ('qudrat_score_student_entry', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Qudrat Score - Entered by Student')),
                ('tahsili_score_student_entry', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Tahsili Score - Entered by Student')),
                ('government_id_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_govid, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Government ID File')),
                ('government_id_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Government ID Type')),
                ('government_id_issue', models.DateField(blank=True, null=True, verbose_name='Government ID Issue Date')),
                ('government_id_expiry', models.CharField(blank=True, max_length=20, null=True, verbose_name='Government ID Expiry Date')),
                ('government_id_place', models.CharField(blank=True, max_length=50, null=True, verbose_name='Government ID Place of Issue')),
                ('passport_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Passport Number')),
                ('passport_place', models.CharField(blank=True, max_length=50, null=True, verbose_name='Passport Place of Issue ')),
                ('passport_expiry', models.DateField(blank=True, null=True, verbose_name='Passport Expiry Date')),
                ('passport_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_passport, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Upload Passport')),
                ('high_school_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='High School ID')),
                ('high_school_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Name (Arabic)')),
                ('high_school_name_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Name (English)')),
                ('high_school_system', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School System')),
                ('high_school_major_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='High School Major Code')),
                ('high_school_major_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Major Name (Arabic)')),
                ('high_school_major_name_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Major Name (English)')),
                ('high_school_province_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='High School Province Code')),
                ('high_school_province', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Province (Arabic)')),
                ('high_school_province_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Province (English)')),
                ('high_school_city_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='High School City Code')),
                ('high_school_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School City (Arabic)')),
                ('high_school_city_en', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School City (English)')),
                ('high_school_certificate', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_certificate, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='High School Certificate')),
                ('courses_certificate', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_courses, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Courses Certificate')),
                ('withdrawal_university', models.CharField(blank=True, max_length=100, null=True, verbose_name='Withdrew To University')),
                ('withdrawal_reason', models.CharField(blank=True, max_length=500, null=True, verbose_name='Withdrawal Reason')),
                ('withdrawal_proof_letter', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_withdrawal_proof, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Withdrawal Proof Letter')),
                ('withdrawal_date', models.DateTimeField(blank=True, null=True, verbose_name='Withdrawal Date')),
                ('guardian_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Name')),
                ('guardian_government_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Government ID')),
                ('guardian_relation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Relation')),
                ('guardian_phone', models.CharField(blank=True, help_text='With country and area code. e.g. 966138602722', max_length=50, null=True, verbose_name='Guardian Phone')),
                ('guardian_mobile', models.CharField(blank=True, help_text='Guardian mobile should be different than own mobile', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^(9665|٩٦٦٥)\\d{8}$', message='You have entered an invalid mobile number')], verbose_name='Guardian Mobile')),
                ('guardian_email', models.EmailField(blank=True, max_length=50, null=True, verbose_name='Guardian Email')),
                ('guardian_po_box', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian PO Box')),
                ('guardian_postal_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Postal Code')),
                ('guardian_city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian City')),
                ('guardian_job', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Work')),
                ('guardian_employer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Employer')),
                ('relative_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Name')),
                ('relative_relation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Relation')),
                ('relative_phone', models.CharField(blank=True, help_text='With country and area code. e.g. 966138602722', max_length=50, null=True, verbose_name='Relative Mobile')),
                ('relative_po_box', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative PO Box')),
                ('relative_postal_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Postal Code')),
                ('relative_city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative City')),
                ('relative_job', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Work')),
                ('relative_employer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Employer')),
                ('have_a_vehicle', models.BooleanField(default=False, help_text='This will let us help you better to get you a permit to enter campus.', verbose_name='Do you have a vehicle you want to register?')),
                ('vehicle_plate_no', models.CharField(blank=True, max_length=100, null=True, verbose_name='Vehicle Plate No.')),
                ('vehicle_owner', models.CharField(blank=True, max_length=100, null=True, verbose_name='Vehicle Owner')),
                ('vehicle_registration_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_vehicle_registration, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Vehicle Registration File')),
                ('driving_license_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_driving_license, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Driving License File')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Bank Name')),
                ('bank_account', models.CharField(blank=True, help_text='Your International Bank Account Number (IBAN) for your own Saudi bank account. Your IBAN format should be SA followed by 22 digits.', max_length=50, null=True, validators=[django.core.validators.RegexValidator('^(SA)\\d{22}$', message='You have entered an invalid IBAN')], verbose_name='Your IBAN')),
                ('bank_account_identification_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_bank_account_identification, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Bank Account Identification File')),
                ('admission_letter_print_date', models.DateTimeField(blank=True, null=True, verbose_name='Admission Letter Print Date')),
                ('medical_report_print_date', models.DateTimeField(blank=True, null=True, verbose_name='Medical Report Print Date')),
                ('phase2_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 2 Start Date')),
                ('phase2_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 2 End Date')),
                ('phase3_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 3 Start Date')),
                ('phase3_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 3 End Date')),
                ('phase2_submit_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 2 Submit Date')),
                ('phase3_submit_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 3 Submit Date')),
                ('verification_committee_member', models.CharField(blank=True, max_length=50, null=True, verbose_name='Assigned Committee Member')),
                ('verification_documents_incomplete', models.NullBooleanField(verbose_name='Uploaded docs are incomplete?')),
                ('verification_picture_acceptable', models.NullBooleanField(verbose_name='Uploaded picture is rejected?')),
                ('verification_status', models.CharField(blank=True, max_length=500, null=True, verbose_name='Issues With Uploaded Docs')),
                ('verification_notes', models.CharField(blank=True, max_length=500, null=True, verbose_name='Verification Note')),
                ('eligible_for_housing', models.NullBooleanField(verbose_name='Eligible For Housing')),
                ('yesser_high_school_data_dump', models.TextField(blank=True, null=True, verbose_name='Fetched Yesser High School Data Dump')),
                ('yesser_qudrat_data_dump', models.TextField(blank=True, null=True, verbose_name='Fetched Yesser Qudrat Data Dump')),
                ('yesser_tahsili_data_dump', models.TextField(blank=True, null=True, verbose_name='Fetched Yesser Tahsili Data Dump')),
                ('high_school_graduation_year', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='undergraduate_admission.GraduationYear', verbose_name='Graduation Year')),
                ('semester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applicants', to='undergraduate_admission.AdmissionSemester', verbose_name='Admission Semester')),
                ('status_message', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='undergraduate_admission.RegistrationStatusMessage', verbose_name='Message Status')),
                ('tarifi_week_attendance_date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='undergraduate_admission.TarifiReceptionDate', verbose_name='Tarifi Week Attendance Date')),
            ],
            options={
                'verbose_name_plural': 'Admission Requests',
                'verbose_name': 'Admission Request',
            },
        ),
        migrations.RemoveField(
            model_name='user',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='user',
            name='high_school_graduation_year',
        ),
        migrations.RemoveField(
            model_name='user',
            name='nationality',
        ),
        migrations.RemoveField(
            model_name='user',
            name='semester',
        ),
        migrations.RemoveField(
            model_name='user',
            name='status_message',
        ),
        migrations.RemoveField(
            model_name='user',
            name='tarifi_week_attendance_date',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_permissions',
        ),
        migrations.DeleteModel(
            name='HelpDiskForStudent',
        ),
        migrations.DeleteModel(
            name='Student',
        ),
        migrations.DeleteModel(
            name='VerifyStudent',
        ),
        migrations.DeleteModel(
            name='User',
        ),
        migrations.AddField(
            model_name='admissionrequest',
            name='user',
            field=models.ForeignKey(blank=True, help_text='The user associated with this admission request.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admission_requests', to=settings.AUTH_USER_MODEL, verbose_name='Associated User'),
        ),
        migrations.AlterUniqueTogether(
            name='admissionrequest',
            unique_together={('user', 'semester')},
        ),
    ]
