# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2017-06-01 14:46
from __future__ import unicode_literals

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import undergraduate_admission.media_handlers
import undergraduate_admission.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('admission_note', models.CharField(blank=True, max_length=500, null=True, verbose_name='Admission Note')),
                ('saudi_mother', models.NullBooleanField(verbose_name='Saudi Mother')),
                ('saudi_mother_gov_id', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\d{9,11}$', message='You have entered an invalid Government ID')], verbose_name='Saudi Mother Government ID')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('birthday_ah', models.CharField(blank=True, max_length=50, null=True, verbose_name='Birthday Hijri')),
                ('birth_place', models.CharField(blank=True, help_text='Country and city. e.g. Saudi Arabia Jeddah', max_length=100, null=True, verbose_name='Birth Place')),
                ('mobile', models.CharField(db_index=True, help_text='Mobile number should be of this format "9665xxxxxxxx". Use English numerals only. Please make sure to activate promotional messages from your mobile provider.', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^(9665|٩٦٦٥)\\d{8}$', message='You have entered an invalid mobile number')], verbose_name='Mobile')),
                ('phone', models.CharField(blank=True, help_text='With country and area code. e.g. 966138602722', max_length=50, null=True, verbose_name='Phone')),
                ('high_school_gpa', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='High School GPA')),
                ('qudrat_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Qudrat Score')),
                ('tahsili_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Tahsili Score')),
                ('high_school_gpa_student_entry', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='High School GPA')),
                ('qudrat_score_student_entry', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Qudrat Score - Entered by Student')),
                ('tahsili_score_student_entry', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Tahsili Score - Entered by Student')),
                ('kfupm_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='KFUPM ID')),
                ('first_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='First Name (Arabic)')),
                ('second_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='Second Name (Arabic)')),
                ('third_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='Third Name (Arabic)')),
                ('family_name_ar', models.CharField(blank=True, max_length=50, null=True, verbose_name='Family Name (Arabic)')),
                ('student_full_name_ar', models.CharField(blank=True, help_text='Your Arabic full name should be similar to Identification ID/Iqama.', max_length=400, null=True, verbose_name='Student Full Name (Arabic)')),
                ('first_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='First Name (English)')),
                ('second_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='Second Name (English)')),
                ('third_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='Third Name (English)')),
                ('family_name_en', models.CharField(blank=True, max_length=50, null=True, verbose_name='Family Name (English)')),
                ('student_full_name_en', models.CharField(blank=True, help_text='Your English full name should be similar to Passport or high school certificate.', max_length=400, null=True, verbose_name='Student Full Name (English)')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=128)),
                ('mother_gov_id_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_mother_govid, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Mother Government ID')),
                ('birth_certificate', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_birth, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Birth Date Certificate')),
                ('government_id_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_govid, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Government ID File')),
                ('government_id_issue', models.DateTimeField(blank=True, null=True, verbose_name='Government ID Issue Date')),
                ('government_id_expiry', models.CharField(blank=True, max_length=20, null=True, verbose_name='Government ID Expiry Date')),
                ('government_id_place', models.CharField(blank=True, max_length=50, null=True, verbose_name='Government ID Place of Issue')),
                ('passport_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Passport Number')),
                ('passport_place', models.CharField(blank=True, max_length=50, null=True, verbose_name='Passport Place of Issue ')),
                ('passport_expiry', models.DateTimeField(blank=True, null=True, verbose_name='Passport Expiry Date')),
                ('passport_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_passport, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Upload Passport')),
                ('high_school_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Name')),
                ('high_school_system', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School System')),
                ('high_school_province', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School Province')),
                ('high_school_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='High School City')),
                ('high_school_certificate', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_certificate, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='High School Certificate')),
                ('courses_certificate', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_courses, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Courses Certificate')),
                ('student_notes', models.TextField(blank=True, max_length=500, null=True, verbose_name='Student Notes')),
                ('personal_picture', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_picture, validators=[undergraduate_admission.validators.validate_image_extension], verbose_name='Personal Picture')),
                ('guardian_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Name')),
                ('guardian_government_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Government ID')),
                ('guardian_relation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Relation')),
                ('guardian_phone', models.CharField(blank=True, help_text='With country and area code. e.g. 966138602722', max_length=50, null=True, verbose_name='Guardian Phone')),
                ('guardian_mobile', models.CharField(blank=True, help_text='Guardian mobile should be different than own mobile', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^(9665|٩٦٦٥)\\d{8}$', message='You have entered an invalid mobile number')], verbose_name='Guardian Mobile')),
                ('guardian_email', models.EmailField(blank=True, max_length=50, null=True, verbose_name='Guardian Email')),
                ('guardian_po_box', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian PO Box')),
                ('guardian_postal_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Postal Code')),
                ('guardian_city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian City')),
                ('guardian_job', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Work')),
                ('guardian_employer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Guardian Employer')),
                ('blood_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Blood Type')),
                ('student_address', models.CharField(blank=True, max_length=500, null=True, verbose_name='Student Address')),
                ('social_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Social Status')),
                ('kids_no', models.CharField(blank=True, max_length=50, null=True, verbose_name='Number of Kids')),
                ('is_employed', models.BooleanField(default=False, help_text='It is required that applicant be unemployed to be full-time. In case you are currently employed, you need to bring clearance from your employer.', verbose_name='Are You Employed?')),
                ('employer_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Employer Name')),
                ('is_disabled', models.BooleanField(default=False, help_text='This will let us help you better and will not affect your acceptance chances.', verbose_name='Do you have any disabilities?')),
                ('disability_needs', models.CharField(blank=True, max_length=50, null=True, verbose_name='Disability Type')),
                ('disability_needs_notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Other Disability')),
                ('is_diseased', models.BooleanField(default=False, help_text='This will let us help you better and will not affect your acceptance chances.', verbose_name='Do you have any chronic diseases?')),
                ('chronic_diseases', models.CharField(blank=True, max_length=500, null=True, verbose_name='Chronic Diseases')),
                ('chronic_diseases_notes', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Chronic Diseases Notes')),
                ('relative_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Name')),
                ('relative_relation', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Relation')),
                ('relative_phone', models.CharField(blank=True, help_text='With country and area code. e.g. 966138602722', max_length=50, null=True, verbose_name='Relative Mobile')),
                ('relative_po_box', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative PO Box')),
                ('relative_po_stal_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Postal Code')),
                ('relative_city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative City')),
                ('relative_job', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Work')),
                ('relative_employer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Relative Employer')),
                ('have_a_vehicle', models.BooleanField(default=False, help_text='This will let us help you better to get you a permit to enter campus.', verbose_name='Do you have a vehicle you want to register?')),
                ('vehicle_plate_no', models.CharField(blank=True, max_length=100, null=True, verbose_name='Vehicle Plate No.')),
                ('vehicle_registration_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_vehicle_registration, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Vehicle Registration File')),
                ('driving_license_file', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_driving_license, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Driving License File')),
                ('admission_letter_print_date', models.DateTimeField(blank=True, null=True, verbose_name='Admission Letter Print Date')),
                ('medical_report_print_date', models.DateTimeField(blank=True, null=True, verbose_name='Medical Report Print Date')),
                ('withdrawal_date', models.DateTimeField(blank=True, null=True, verbose_name='Withdrawal Date')),
                ('withdrawal_university', models.CharField(blank=True, max_length=100, null=True, verbose_name='Withdrew To University')),
                ('withdrawal_reason', models.CharField(blank=True, max_length=500, null=True, verbose_name='Withdrawal Reason')),
                ('phase2_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 2 Start Date')),
                ('phase2_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 2 End Date')),
                ('phase3_start_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 3 Start Date')),
                ('phase3_end_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 3 End Date')),
                ('phase2_submit_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 2 Submit Date')),
                ('phase3_submit_date', models.DateTimeField(blank=True, null=True, verbose_name='Phase 3 Submit Date')),
                ('verification_documents_incomplete', models.NullBooleanField(verbose_name='Uploaded docs are incomplete?')),
                ('verification_status', models.CharField(blank=True, max_length=500, null=True, verbose_name='Issues With Uploaded Docs')),
                ('verification_notes', models.CharField(blank=True, max_length=500, null=True, verbose_name='Verification Note')),
                ('withdrawal_proof_letter', models.FileField(blank=True, null=True, upload_to=undergraduate_admission.media_handlers.upload_location_withdrawal_proof, validators=[undergraduate_admission.validators.validate_file_extension], verbose_name='Withdrawal Proof Letter')),
                ('eligible_for_housing', models.NullBooleanField(verbose_name='Eligible For Housing')),
                ('roommate_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='Roommate ID')),
                ('english_placement_test_score', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='English Placement Test Score')),
                ('english_speaking_test_score', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='English Speaking Test Score')),
                ('english_level', models.CharField(blank=True, max_length=20, null=True, verbose_name='English Level')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionSemester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester_name', models.CharField(max_length=200, verbose_name='Semester Name')),
                ('phase1_start_date', models.DateTimeField(null=True, verbose_name='Phase 1 Start Date')),
                ('phase1_end_date', models.DateTimeField(null=True, verbose_name='Phase 1 End Date')),
                ('phase2_start_date', models.DateTimeField(null=True, verbose_name='Phase 2 Start Date')),
                ('phase2_end_date', models.DateTimeField(null=True, verbose_name='Phase 2 End Date')),
                ('phase3_start_date', models.DateTimeField(null=True, verbose_name='Phase 3 Start Date')),
                ('phase3_end_date', models.DateTimeField(null=True, verbose_name='Phase 3 End Date')),
                ('phase4_start_date', models.DateTimeField(null=True, verbose_name='Phase 4 Start Date')),
                ('phase4_end_date', models.DateTimeField(null=True, verbose_name='Phase 4 End Date')),
                ('high_school_gpa_weight', models.FloatField(null=True, verbose_name='High School GPA Weight')),
                ('qudrat_score_weight', models.FloatField(null=True, verbose_name='Qudrat Score Weight')),
                ('tahsili_score_weight', models.FloatField(null=True, verbose_name='Tahsili Score Weight')),
                ('cutoff_point', models.FloatField(blank=True, null=True, verbose_name='Cutoff Point')),
            ],
            options={
                'verbose_name_plural': 'Admission: Admission Semesters',
                'verbose_name': 'Admission Semester',
            },
        ),
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agreement_type', models.CharField(max_length=100, null=True, verbose_name='Agreement Type')),
                ('agreement_header_ar', models.TextField(blank=True, max_length=2000, null=True, verbose_name='Agreement Header (Arabic)')),
                ('agreement_header_en', models.TextField(blank=True, max_length=2000, null=True, verbose_name='Agreement Header (English)')),
                ('agreement_footer_ar', models.TextField(blank=True, max_length=2000, null=True, verbose_name='Agreement Footer (Arabic)')),
                ('agreement_footer_en', models.TextField(blank=True, max_length=2000, null=True, verbose_name='Agreement Footer (English)')),
                ('semester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agreement', to='undergraduate_admission.AdmissionSemester', verbose_name='Semester')),
            ],
            options={
                'verbose_name_plural': 'Admission and Student Affairs: Agreements',
            },
        ),
        migrations.CreateModel(
            name='AgreementItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agreement_text_ar', models.TextField(max_length=2000, verbose_name='Agreement Text (Arabic)')),
                ('agreement_text_en', models.TextField(max_length=2000, verbose_name='Agreement Text (English)')),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
                ('display_order', models.PositiveSmallIntegerField(null=True, verbose_name='Display Order')),
                ('agreement', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='items', to='undergraduate_admission.Agreement')),
            ],
            options={
                'verbose_name_plural': 'Admission and Student Affairs: Agreement Items',
                'ordering': ['agreement', '-display_order'],
            },
        ),
        migrations.CreateModel(
            name='Aux1To100',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counter', models.PositiveIntegerField(blank=True, null=True, verbose_name='Counter')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name_ar', models.CharField(max_length=100, verbose_name='City Name Arabic')),
                ('city_name_en', models.CharField(max_length=100, verbose_name='City Name English')),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
                ('display_order', models.PositiveSmallIntegerField(null=True, verbose_name='Display Order')),
            ],
            options={
                'verbose_name_plural': 'Admission: Cities',
                'ordering': ['-display_order'],
            },
        ),
        migrations.CreateModel(
            name='DeniedStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('government_id', models.CharField(db_index=True, max_length=12, verbose_name='Government ID')),
                ('student_name', models.CharField(max_length=400, verbose_name='Student Name')),
                ('message', models.CharField(max_length=400, verbose_name='Message')),
                ('university_code', models.CharField(max_length=10, verbose_name='University Code')),
                ('last_trial_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Trial Date')),
                ('trials_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Count Trial')),
                ('semester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='denied_students', to='undergraduate_admission.AdmissionSemester')),
            ],
            options={
                'verbose_name_plural': 'Admission: Denied Students',
            },
        ),
        migrations.CreateModel(
            name='DistinguishedStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('government_id', models.CharField(max_length=12, verbose_name='Government ID')),
                ('student_name', models.CharField(max_length=400, verbose_name='Student Name')),
                ('city', models.CharField(max_length=400, verbose_name='City')),
                ('attended', models.BooleanField(default=True, verbose_name='Attended')),
            ],
            options={
                'verbose_name_plural': 'Admission: Distinguished Students',
            },
        ),
        migrations.CreateModel(
            name='GraduationYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graduation_year_en', models.CharField(max_length=50, verbose_name='Graduation Year (English)')),
                ('graduation_year_ar', models.CharField(max_length=50, verbose_name='Graduation Year (Arabic)')),
                ('description', models.CharField(max_length=200, verbose_name='Description')),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
                ('display_order', models.PositiveSmallIntegerField(null=True, verbose_name='Display Order')),
            ],
            options={
                'verbose_name_plural': 'Admission: Graduation Years',
                'ordering': ['-display_order'],
            },
        ),
        migrations.CreateModel(
            name='ImportantDateSidebar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ar', models.CharField(max_length=200, verbose_name='Arabic Title')),
                ('title_en', models.CharField(max_length=200, verbose_name='English Title')),
                ('description_ar', models.CharField(max_length=300, null=True, verbose_name='Arabic Description')),
                ('description_en', models.CharField(max_length=300, null=True, verbose_name='English Description')),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
                ('display_order', models.PositiveSmallIntegerField(null=True, verbose_name='Display Order')),
            ],
            options={
                'verbose_name_plural': 'Admission: Important Date Sidebar',
                'ordering': ['display_order'],
            },
        ),
        migrations.CreateModel(
            name='KFUPMIDsPool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kfupm_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='KFUPM ID')),
                ('semester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='semester_ids', to='undergraduate_admission.AdmissionSemester', verbose_name='Admission Semester')),
            ],
            options={
                'verbose_name_plural': 'Registrar: KFUPM ID Pools',
            },
        ),
        migrations.CreateModel(
            name='Lookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lookup_type', models.CharField(db_index=True, max_length=20, null=True)),
                ('lookup_value_ar', models.CharField(max_length=100, null=True)),
                ('lookup_value_en', models.CharField(max_length=100, null=True)),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
                ('display_order', models.PositiveSmallIntegerField(null=True, verbose_name='Display Order')),
            ],
            options={
                'verbose_name_plural': 'Admission: Look ups',
                'ordering': ['lookup_type', '-display_order'],
            },
        ),
        migrations.CreateModel(
            name='Nationality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nationality_ar', models.CharField(max_length=50, verbose_name='Nationality (Arabic)')),
                ('nationality_en', models.CharField(max_length=50, verbose_name='Nationality (English)')),
                ('show', models.BooleanField(default=True, verbose_name='Show')),
                ('display_order', models.PositiveSmallIntegerField(null=True, verbose_name='Display Order')),
            ],
            options={
                'verbose_name_plural': 'Admission: Nationalities',
                'ordering': ['display_order', 'nationality_en'],
            },
        ),
        migrations.CreateModel(
            name='RegistrationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_ar', models.CharField(max_length=50, verbose_name='Status (Arabic)')),
                ('status_en', models.CharField(max_length=50, verbose_name='Status (English)')),
                ('status_code', models.CharField(max_length=20, null=True, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Admission: Registration Status',
            },
        ),
        migrations.CreateModel(
            name='RegistrationStatusMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_message_ar', models.CharField(max_length=500, verbose_name='Registration Status Message AR')),
                ('status_message_en', models.CharField(max_length=500, verbose_name='Registration Status Message EN')),
                ('status_message_code', models.CharField(max_length=20, null=True, unique=True)),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_messages', to='undergraduate_admission.RegistrationStatus')),
            ],
            options={
                'verbose_name_plural': 'Admission: Registration Status Messages',
            },
        ),
        migrations.CreateModel(
            name='TarifiReceptionDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reception_date', models.CharField(max_length=600, null=True, verbose_name='Reception Date')),
                ('slots', models.PositiveSmallIntegerField(default=300, null=True, verbose_name='Slots')),
                ('slot_start_date', models.DateTimeField(null=True, verbose_name='Start Date')),
                ('slot_end_date', models.DateTimeField(null=True, verbose_name='End Date')),
                ('semester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tarifi_reception_dates', to='undergraduate_admission.AdmissionSemester', verbose_name='Semester')),
            ],
            options={
                'verbose_name_plural': 'Admission: Tarifi Reception Dates',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='high_school_graduation_year',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='undergraduate_admission.GraduationYear', verbose_name='Graduation Year'),
        ),
        migrations.AddField(
            model_name='user',
            name='nationality',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='undergraduate_admission.Nationality', verbose_name='Nationality'),
        ),
        migrations.AddField(
            model_name='user',
            name='semester',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applicants', to='undergraduate_admission.AdmissionSemester', verbose_name='Admission Semester'),
        ),
        migrations.AddField(
            model_name='user',
            name='status_message',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='undergraduate_admission.RegistrationStatusMessage', verbose_name='Message Status'),
        ),
        migrations.AddField(
            model_name='user',
            name='tarifi_week_attendance_date',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='undergraduate_admission.TarifiReceptionDate', verbose_name='Tarifi Week Attendance Date'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='HelpDiskForStudent',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('undergraduate_admission.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('undergraduate_admission.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VerifyStudent',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('undergraduate_admission.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
